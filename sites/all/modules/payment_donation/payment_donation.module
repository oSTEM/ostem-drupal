<?php

/**
 * @file
 * Hook implementations and shared functions.
 */

/**
 * Implements hook_block_info().
 */
function payment_donation_block_info() {
  $blocks['payment_donation'] = array(
    'info' => t('Payment donation form'),
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function payment_donation_block_configure($delta = '') {
  if ($delta == 'payment_donation') {
    $form['payment_donation_payment_currency_code'] = array(
      '#default_value' => variable_get('payment_donation_payment_currency_code', ''),
      '#options' => currency_options(),
      '#required' => TRUE,
      '#title' => t('Currency'),
      '#type' => 'select',
    );
    $form['payment_donation_payment_description'] = array(
      '#default_value' => variable_get('payment_donation_payment_description', ''),
      '#required' => TRUE,
      '#title' => t('Payment description'),
      '#type' => 'textfield',
    );
    $form['payment_donation_pmid'] = array(
      '#default_value' => variable_get('payment_donation_pmid', 0),
      '#options' => payment_method_options(),
      '#required' => TRUE,
      '#title' => t('Payment method'),
      '#type' => 'select',
    );
    $block_body = variable_get('payment_donation_block_body', array(
      'format' => '',
      'value' => '',
    ));
    $form['payment_donation_block_body'] = array(
      '#default_value' => $block_body['value'],
      '#format' => $block_body['format'] ? $block_body['format'] : filter_default_format(),
      '#title' => t('Payment form description'),
      '#type' => 'text_format',
    );

    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function payment_donation_block_save($delta = '', array $edit = array()) {
  if ($delta == 'payment_donation') {
    variable_set('payment_donation_pmid', $edit['payment_donation_pmid']);
    variable_set('payment_donation_payment_currency_code', $edit['payment_donation_payment_currency_code']);
    variable_set('payment_donation_payment_description', $edit['payment_donation_payment_description']);
    variable_set('payment_donation_block_body', $edit['payment_donation_block_body']);
  }
}

/**
 * Implements hook_block_views().
 */
function payment_donation_block_view($delta = '') {
  if ($delta == 'payment_donation') {
    // @todo Return the payment form.
    $block_body = variable_get('payment_donation_block_body', array(
      'format' => '',
      'value' => '',
    ));
    $elements['body'] = array(
      '#markup' => check_markup($block_body['value'], $block_body['format']),
      '#type' => 'markup',
    );
    $elements['form'] = drupal_get_form('payment_donation_form');


    return array(
      'subject' => t('Donation form'),
      'content' => $elements,
    );
  }
}

/**
 * Implements form build callback: the donation form.
 */
function payment_donation_form(array $form, array &$form_state) {
  $pmid = variable_get('payment_donation_pmid', 0);
  $currency_code = variable_get('payment_donation_payment_currency_code', '');
  $description = variable_get('payment_donation_payment_description', '');

  if (!$currency_code || !$pmid || !$description) {
    $form['#access'] = FALSE;
    drupal_set_message(t('No payment method or description have been configured for Payment donation form.'), 'error');
    return $form;
  }

  $payment_method = entity_load_single('payment_method', $pmid);

  $form['amount'] = array(
    '#currency_code' => $currency_code,
    '#title' => t('Amount'),
    '#type' => 'currency_amount',
  );
  $currencies = $payment_method->controller->currencies;
  if (isset($currencies[$currency_code]['minimum'])) {
    $form['amount']['#minimum_amount'] = $currencies[$currency_code]['minimum'];
  }
  if (isset($currencies[$currency_code]['maximum'])) {
    $form['amount']['#maximum_amount'] = $currencies[$currency_code]['maximum'];
  }

  $payment = new Payment(array(
    'context' => 'payment_donation',
    'context_data' => array(
      'destination' => $_GET['q'],
    ),
    'currency_code' => $currency_code,
    'description' => $description,
    'finish_callback' => 'payment_donation_finish',
    'method' => $payment_method,
  ));
  $form_info = payment_form_embedded($form_state, $payment, array($pmid));
  unset($form_info['elements']['payment_line_items']);
  unset($form_info['elements']['payment_status']);
  $form = array_merge($form, $form_info['elements']);
  
  // OSTEM CUSTOM BUGFIX, ENSURE THE VALIDATOR IS CALLED:
  if(isset($form['#validate'])) {
    array_unshift($form['#validate'], 'payment_donation_form_validate');
  }

  $form['pay'] = array(
    '#value' => t('Pay'),
    '#type' => 'submit',
    '#submit' => array_merge(array('payment_donation_form_submit'), $form_info['submit']),
  );

  return $form;
}

/**
 * Implements form validate callback.
 */
function payment_donation_form_validate(array $form, array &$form_state) {
  /** @var Payment $payment */
  $payment =& $form_state['payment'];
  $amount = $form_state['values']['amount']['amount'];
  $payment->setLineItem(new PaymentLineItem(array(
    'amount' => $amount,
    'description' => variable_get('payment_donation_payment_description', ''),
    'name' => 'payment_donation',
  )));

  try {
    $payment->method->validate($payment);
  }
  catch (PaymentValidationException $e) {
    $message = strlen($e->getMessage()) ? $e->getMessage() : t('The payment cannot be executed.');
    form_error($form['amount'], $message);
  }
}

/**
 * Implements form submit callback.
 */
function payment_donation_form_submit(array $form, array &$form_state) {
  /** @var Payment $payment */
  $payment = $form_state['payment'];
  entity_save('payment', $payment);
  $payment->execute();
}

/**
 * Implements Payment::finish_callback.
 */
function payment_donation_finish(Payment $payment) {
  if (payment_access('view', $payment)) {
    $view = ' ' . l(t('View payment'), 'payment/' . $payment->pid) . '.';
  }
  if (payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_PENDING)) {
    drupal_set_message(t('Your payment is still being processed.') . $view, 'warning');
  }
  elseif (payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_SUCCESS)) {
    drupal_set_message(t('Your payment was successfully completed.') . $view);
  }
  elseif (payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_FAILED)) {
    drupal_set_message(t('Your payment failed.') . $view, 'error');
  }

  drupal_goto($payment->context_data['destination']);
}
